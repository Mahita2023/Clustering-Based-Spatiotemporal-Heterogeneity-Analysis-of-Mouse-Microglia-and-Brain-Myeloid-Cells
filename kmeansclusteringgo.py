# -*- coding: utf-8 -*-
"""KmeansClusteringGO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ieDNa7aCYj3qo_ws9X48sHp3sWMeV7ZO
"""

# Start of code written by Taha Imtiaz
!pip install umap-learn
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import umap.umap_ as umap
from collections import Counter
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from google.colab import drive
drive.mount('/content/drive')
os.chdir('/content/drive/MyDrive/MachineLearning/Project')  # This line and the two before are specifically for Google Collab, can safely ignore/remove

# Loading in the data
pathName = "/content/drive/MyDrive/MachineLearning/Project"
dataFrame = pd.read_excel(pathName + '/GO_data_afterpreprocessing.xlsx')
age_region_df = pd.read_excel(pathName + '/Age_Region_data.xlsx')
age_region_df["age_region"] = age_region_df["Age"] + age_region_df["Region"]
dataFrame = dataFrame.transpose()
dataFrame = dataFrame.iloc[1:]

x = dataFrame.to_numpy()

# Checking for data errors
x[x == np.NaN] = 9999

# Replacing data errors
imputer = SimpleImputer(missing_values=9999, strategy='median')
imputer.fit(x)
x = imputer.transform(x)

# PCA Dimension Reduction
pca = PCA(n_components=30, random_state=33022)
pca.fit(x)
x = pca.transform(x)

# Clustering
clus = KMeans(n_clusters=17, random_state=33022)
clus.fit(x)
label = clus.predict(x)

print('The silhouette score is', silhouette_score(x, label))

# Umap dimensionality reduction for plotting
reduced = umap.UMAP(n_neighbors=15, n_components=2, metric='chebyshev', random_state=33022)
reduced.fit(x)
x = reduced.transform(x)

# This section is used for counting the number of samples in each cluster, and also counting the occurences of a given age + region in a given cluster. Since I chose to use 17 clusters, there are 17 counters. If I wanted to test more or fewer clusters, I would add or remove those counters.
counter_1 = 0
counter_2 = 0
counter_3 = 0
counter_4 = 0
counter_5 = 0
counter_6 = 0
counter_7 = 0
counter_8 = 0
counter_9 = 0
counter_10 = 0
counter_11 = 0
counter_12 = 0
counter_13 = 0
counter_14 = 0
counter_15 = 0
counter_16 = 0
counter_17 = 0

for i in range(len(age_region_df["age_region"])):
  if age_region_df["age_region"][i] == "P7CB": # "P7CB" is replaced with whichever age + region we want to plot. The 12 options are: P7CB, P7CP, P7CTX, P7HIP, P7OB, P7STR, P60CB, P60CP, P60CTX, P60HIP, P60OB, P60STR
    if label[i] == 0:
      counter_1 = counter_1 + 1
    elif label[i] == 1:
      counter_2 = counter_2 + 1
    elif label[i] == 2:
      counter_3 = counter_3 + 1
    elif label[i] == 3:
      counter_4 = counter_4 + 1
    elif label[i] == 4:
      counter_5 = counter_5 + 1
    elif label[i] == 5:
      counter_6 = counter_6 + 1
    elif label[i] == 6:
      counter_7 = counter_7 + 1
    elif label[i] == 7:
      counter_8 = counter_8 + 1
    elif label[i] == 8:
      counter_9 = counter_9 + 1
    elif label[i] == 9:
      counter_10 = counter_10 + 1
    elif label[i] == 10:
      counter_11 = counter_11 + 1
    elif label[i] == 11:
      counter_12 = counter_12 + 1
    elif label[i] == 12:
      counter_13 = counter_13 + 1
    elif label[i] == 13:
      counter_14 = counter_14 + 1
    elif label[i] == 14:
      counter_15 = counter_15 + 1
    elif label[i] == 15:
      counter_16 = counter_16 + 1
    elif label[i] == 16:
      counter_17 = counter_17 + 1

samples_1 = np.size(np.where(clus.labels_ == 0))
samples_2 = np.size(np.where(clus.labels_ == 1))
samples_3 = np.size(np.where(clus.labels_ == 2))
samples_4 = np.size(np.where(clus.labels_ == 3))
samples_5 = np.size(np.where(clus.labels_ == 4))
samples_6 = np.size(np.where(clus.labels_ == 5))
samples_7 = np.size(np.where(clus.labels_ == 6))
samples_8 = np.size(np.where(clus.labels_ == 7))
samples_9 = np.size(np.where(clus.labels_ == 8))
samples_10 = np.size(np.where(clus.labels_ == 9))
samples_11 = np.size(np.where(clus.labels_ == 10))
samples_12 = np.size(np.where(clus.labels_ == 11))
samples_13 = np.size(np.where(clus.labels_ == 12))
samples_14 = np.size(np.where(clus.labels_ == 13))
samples_15 = np.size(np.where(clus.labels_ == 14))
samples_16 = np.size(np.where(clus.labels_ == 15))
samples_17 = np.size(np.where(clus.labels_ == 16))

# Plotting the results
f1 = plt.figure(1)
plt.scatter(x[:,0], x[:,1], c=clus.labels_, cmap='Spectral')
plt.title('K-means UMAP for GO Dataset');
plt.colorbar()

f2 = plt.figure(2)
bars = ['0', '1', '2', '3','4','5','6','7','8','9','10','11','12','13','14','15','16']
values = [samples_1, samples_2, samples_3, samples_4, samples_5, samples_6, samples_7, samples_8, samples_9, samples_10, samples_11, samples_12, samples_13, samples_14, samples_15, samples_16, samples_17]
plt.bar(bars, values)
plt.xlabel('Clusters')
plt.ylabel('Number of Samples')
plt.title("Clustering Result for GO Dataset using K-means")
plt.grid()

f3 = plt.figure(3)
bars = ['0', '1', '2', '3','4','5','6','7','8','9','10','11','12','13','14','15','16']
values = [counter_1, counter_2, counter_3, counter_4, counter_5, counter_6, counter_7, counter_8, counter_9, counter_10, counter_11, counter_12, counter_13, counter_14, counter_15, counter_16, counter_17]
plt.bar(bars, values)
plt.grid()
plt.xlabel("Clusters")
plt.ylabel("Number of Samples")
plt.title("Clustering Result for P7 CB using K-means") # Title is altered for whichever age region is chosen in the for loop in the counting section

plt.show()

# End of code written by Taha Imtiaz