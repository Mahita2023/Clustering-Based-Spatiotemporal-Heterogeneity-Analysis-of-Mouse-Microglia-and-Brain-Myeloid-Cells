# -*- coding: utf-8 -*-
"""KmeansClusteringGene.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18aTqPjT4wl48Vvot-I_zS3w-i84z8GZP
"""

# The below code is written by Taha Imtiaz
!pip install umap-learn
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import umap.umap_ as umap
from collections import Counter
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from google.colab import drive
drive.mount('/content/drive')
os.chdir('/content/drive/MyDrive/MachineLearning/Project')  # This line and the two before are specifically for Google Collab, can safely ignore/remove

# Loading in the data
pathName = "/content/drive/MyDrive/MachineLearning/Project"
dataFrame = pd.read_excel(pathName + '/Gene_data_afterpreprocessing.xlsx')
dataFrame = dataFrame.transpose()
dataFrame = dataFrame.iloc[1:]

x = dataFrame.to_numpy()
# Checking for data errors
x[x == np.NaN] = 9999

# Replacing data errors
imputer = SimpleImputer(missing_values=9999, strategy='median')
imputer.fit(x)
x = imputer.transform(x)

# PCA Dimension Reduction
pca = PCA(n_components=30, random_state=33022)
pca.fit(x)
x = pca.transform(x)

# Clustering
clus = KMeans(n_clusters=17, random_state=33022)
clus.fit(x)
label = clus.predict(x)

samples_1 = np.size(np.where(clus.labels_ == 0))
samples_2 = np.size(np.where(clus.labels_ == 1))
samples_3 = np.size(np.where(clus.labels_ == 2))
samples_4 = np.size(np.where(clus.labels_ == 3))
samples_5 = np.size(np.where(clus.labels_ == 4))
samples_6 = np.size(np.where(clus.labels_ == 5))
samples_7 = np.size(np.where(clus.labels_ == 6))
samples_8 = np.size(np.where(clus.labels_ == 7))
samples_9 = np.size(np.where(clus.labels_ == 8))
samples_10 = np.size(np.where(clus.labels_ == 9))
samples_11 = np.size(np.where(clus.labels_ == 10))
samples_12 = np.size(np.where(clus.labels_ == 11))
samples_13 = np.size(np.where(clus.labels_ == 12))
samples_14 = np.size(np.where(clus.labels_ == 13))
samples_15 = np.size(np.where(clus.labels_ == 14))
samples_16 = np.size(np.where(clus.labels_ == 15))
samples_17 = np.size(np.where(clus.labels_ == 16))

print('The silhouette score is', silhouette_score(x, label))

# Umap dimensionality reduction for plotting
reduced = umap.UMAP(n_neighbors=15, n_components=2, metric='chebyshev', random_state=33022)
reduced.fit(x)
x = reduced.transform(x)

# Plotting
f1 = plt.figure(1)
plt.scatter(x[:,0], x[:,1], c=clus.labels_, cmap='Spectral')
plt.title('K-means UMAP for Gene Dataset');
plt.colorbar()

f2 = plt.figure(2)
bars = ['0', '1', '2', '3','4','5','6','7','8','9','10','11','12','13','14','15','16']
values = [samples_1, samples_2, samples_3, samples_4, samples_5, samples_6, samples_7, samples_8, samples_9, samples_10, samples_11, samples_12, samples_13, samples_14, samples_15, samples_16, samples_17]
plt.bar(bars, values)
plt.grid()
plt.xlabel('Clusters')
plt.ylabel('Number of Samples')
plt.title("Clustering Result for Gene Dataset using K-means")
plt.show()

# End of code written by Taha Imtiaz